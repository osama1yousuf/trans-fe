'use client'
import { useEffect, useState } from 'react'
import Dashboard from './Components/Dashboard'
import './globals.css'
import 'react-toastify/dist/ReactToastify.css';
import { Inter } from 'next/font/google'
const inter = Inter({ subsets: ['latin'] })
import { usePathname, useRouter } from 'next/navigation'
import { ToastContainer } from 'react-toastify'

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({ children }) {
  let adminTab =  [
    {
      name: "Dashboard",
      url: "/admin/dashboard",
      active: false,

    },
    {
      name: "Driver",
      url: "driver",
      active: false,
      Content: [
        {
          name: "Create Driver",
          endpoints: 'admin/createdriver'
        }, {
          name: "Active Driver",
          endpoints: 'admin/activedriver'
        },
        {
          name: "InActive Driver",
          endpoints: 'admin/inactivedriver'
        }
      ]
    }, {
      name: "Member",
      url: "member",
      active: false,
      Content: [
        {
          name: "Create Member",
          endpoints: 'admin/createmember'
        }, {
          name: "Active Member",
          endpoints: 'admin/activemember'
        },
        {
          name: "InActive Member",
          endpoints: 'admin/inactivemember'
        }
      ]
    }
    ,
    {
      name: "Location",
      url: "admin/location",
      active: false,
    },
  ]
  let memberTab =  [
    {
      name: "Dashboard",
      url: "/member/dashboard",
      active: false,

    }
  ]
  let driverTab =  [
    {
      name: "Dashboard",
      url: "/driver/dashboard",
      active: false,

    }
  ]
  const pathname = usePathname()
  const [openTabs, setOpenTabs] = useState([])
  const [locationName, setLocationName] = useState('');
  const [activeTab, setActiveTab] = useState('Dashboard')
  const [sideBar, setSideBar] = useState(true)

  const handleActive = (e) => {
    for (let i = 0; i < openTabs.length; i++) {
      const element = openTabs[i];
      // console.log("element");
      if (element.Content) {
        // console.log("element" , element.Content);
        let found = element.Content.find((val) => val.name === e)
        if (found) {
          console.log("found", found.name);
          setActiveTab(e)
          setSideBar(!sideBar)
        }
      }
    }
  }
  const handleClick = (e) => {
    console.log(e);
    if (e.name !== "Location") {
      let result = openTabs.find((v) => v.name == e.name)
      if (result && !e.Content) {
        setActiveTab(e.name)
        setSideBar(!sideBar)
      }
      setOpenTabs(prevTabs => {
        const updatedTabs = prevTabs.map(tab => {
          if (tab.name === e.name) {
            return {
              ...tab,
              active: !tab.active
            };
          }
          return tab;
        });
  
        return updatedTabs;
      });
    }else{
      setShowModal(!showModal)
    }
  };
  const handletoggle = () => {
    setSideBar(!sideBar)
  }
  useEffect(()=>{
     if (pathname.includes('/driver')) {
      setOpenTabs(driverTab)
     }else if (pathname.includes('/member')) {
      setOpenTabs(memberTab)
     }else if(pathname.includes('/admin')){
      setOpenTabs(adminTab)
     }
  },[])

  const handleLocation = async ()=>{
    console.log("object" , locationName);
    if(locationName != ''){
      try{
        let body = {
          location : locationName
        }
       let response = await  axiosInstance.post('/locations' , body)
       toast.success("Location added sucessfully")
       setLocationName('')
       setShowModal(false)
      }catch(e){
        console.log(e.message);
        toast.error(e.message)
      }
    }else{
      setShowModal(false)
    }
  }
  return (
    <html lang="en">

      <body className={inter.className}>
        <ToastContainer
          position="top-center"
          // autoClose={200}
          // rtl={false}
          // pauseOnFocusLoss={false}
          // draggable={false}
          theme="colored"
        />
        <Dashboard handleLocation={handleLocation} handleClick={handleClick} handletoggle={handletoggle} pathname={pathname} openTabs={openTabs} locationName={locationName} activeTab={activeTab} sideBar={sideBar} handleActive={handleActive} >
          {children}
        </Dashboard>
      </body>
    </html>
  )
}
